from aiogram import Bot, F, types
from aiogram.enums import ChatType
from aiogram.filters import Command, CommandObject, CommandStart
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from dishka import FromDishka
from dishka.integrations.aiogram import inject

from src.tg_bot.domains.start_domain import start_router
from src.tg_bot.domains.start_domain.keyboards import get_start_inline_keyboard
from src.tg_bot.domains.user_management.services import UserBotService

#
#
# @start_router.message(Command("start"), F.chat.type == ChatType.PRIVATE)
# async def start_private_command(
#     message: types.Message,
# ):
#     await message.answer("–ü—Ä–∏–≤–µ—Ç –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")
#
#
# @start_router.message(
#     Command("start"), F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP})
# )
# @inject
# async def start_group_command(
#     message: types.Message,
#     bot: Bot,
#     user_bot_service: FromDishka[UserBotService],
# ) -> None:
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
#     user = await user_bot_service.is_user_in_chat(message)
#
#     kb = await get_start_inline_keyboard(bot, user.in_chat)
#     await message.answer(
#         """
# *–ü—Ä–∏–≤–µ—Ç!* ‚úåÔ∏è
# ‚û°Ô∏è –ò–¥–∏ –ø–æ *–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É* –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é.
#
# üî´ –•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ *–†—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É*? ‚Äî *–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è!*
#
# ü§°*–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*:
# - –ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–∞—Ç—É.
# - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã.
# """,
#         reply_markup=kb,
#         parse_mode="Markdown",
#     )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
@start_router.message(
    Command("start"), F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP})
)
@inject
async def start_group(
    message: types.Message,
    bot: Bot,
    user_bot_service: FromDishka[UserBotService],
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = await user_bot_service.is_user_in_chat(message)

    kb = await get_start_inline_keyboard(bot, user.in_chat, message.chat.title)
    await message.answer(
        """
*–ü—Ä–∏–≤–µ—Ç!* ‚úåÔ∏è
‚û°Ô∏è –ò–¥–∏ –ø–æ *–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É* –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é.

üî´ –•–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å –≤ *–†—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É*? ‚Äî *–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è!*

ü§°*–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*:
- –ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–∞—Ç—É.
- –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã.
""",
        reply_markup=kb,
        parse_mode="Markdown",
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ deep link –∏–∑ –≥—Ä—É–ø–ø—ã
@start_router.message(CommandStart(deep_link=True), F.chat.type == ChatType.PRIVATE)
async def handle_deeplink(message: types.Message, command: CommandObject, bot: Bot):
    if command.args and command.args.startswith("from_group_"):
        group_id = command.args.split("_")[-1]
        await message.answer(
            f"–í—ã –ø–µ—Ä–µ—à–ª–∏ –∏–∑ –≥—Ä—É–ø–ø—ã {group_id}. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"
                        )
                    ]
                ]
            ),
        )



