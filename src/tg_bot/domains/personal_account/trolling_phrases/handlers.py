from aiogram import Bot, F
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dishka import FromDishka
from dishka.integrations.aiogram import inject

from src.tg_bot.domains.personal_account.trolling_phrases import trolling_phrases_router
from src.tg_bot.domains.personal_account.trolling_phrases.keyboards import (
    get_trolling_phrases_inline_keyboard,
)
from src.tg_bot.domains.personal_account.trolling_phrases.services import (
    TrollingPhrasesService,
)


@trolling_phrases_router.callback_query(F.data == "trolling_phrases")
@inject
async def handle_trolling_phrases(callback: CallbackQuery):
    await callback.answer("–ë–ª—è—Ç—å –Ω—É —Ç—ã –∏ –º—É–¥–µ–Ω—å...")
    message = """
    <b>üîß –§–£–ù–ö–¶–ò–û–ù–ê–õ üîß</b>

    <i>‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨</i>
    ‚Ä¢ üìÅ <i>–ü—Ä–æ—Å–º–æ—Ç—Ä –∞—Ä—Ö–∏–≤–∞</i> (–¢–µ–±–µ –¥–µ–ª–∞—Ç—å —Ö—É–π?)
    ‚Ä¢ ‚öôÔ∏è <i>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π</i> (—Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–µ –≤ –Ω–∞—à —á–∞—Ç)
    ‚Ä¢ üóëÔ∏è <i>–£–¥–∞–ª–µ–Ω–∏–µ</i> (–Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–π –≤—ã–±–æ—Ä)

    <i>‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨</i>  
    <code>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –Ø –ø–æ–¥–∫–ª—é—á–∏–ª –ò–ò - —Ç–∞–∫ —á—Ç–æ –Ω–∞—Ö—É–π –∏–¥–∏.</code>  
    """
    await callback.message.edit_text(
        message,
        parse_mode="HTML",
        reply_markup=await get_trolling_phrases_inline_keyboard(),
    )


PHRASES_PER_PAGE = 5


@trolling_phrases_router.callback_query(F.data == "all_phrases")
@inject
async def show_first_page(
    callback: CallbackQuery,
    trolling_phrases_service: FromDishka[TrollingPhrasesService],
):
    # –í–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ CallbackQuery, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await _handle_phrases_page(callback, trolling_phrases_service, page=1)


@trolling_phrases_router.callback_query(F.data.startswith("phrases_page_"))
@inject
async def handle_phrases_page(
    callback: CallbackQuery,
    bot: Bot,
    trolling_phrases_service: FromDishka[TrollingPhrasesService],
    page: int | None = None,
):
    if page is None:
        page = int(callback.data.split("_")[-1])
    await _handle_phrases_page(callback, trolling_phrases_service, page)


async def _handle_phrases_page(
    callback: CallbackQuery,
    trolling_phrases_service: TrollingPhrasesService,
    page: int | None = None,
):
    await callback.answer("–õ–∏—Å—Ç–∞–µ–º...")
    phrases = await trolling_phrases_service.get_all_phrases()
    total_pages = (len(phrases) + PHRASES_PER_PAGE - 1) // PHRASES_PER_PAGE
    # –ü–æ–ª—É—á–∞–µ–º —Ñ—Ä–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * PHRASES_PER_PAGE
    end_idx = start_idx + PHRASES_PER_PAGE
    current_phrases = [x["phrase"] for x in phrases[start_idx:end_idx]]
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = "<b>üìú –í—Å–µ —Ñ—Ä–∞–∑—ã:</b>\n\n"
    for i, phrase in enumerate(current_phrases, start=start_idx + 1):
        message_text += f"{i}. <code>{phrase}</code>\n"
    message_text += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}"
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    builder = InlineKeyboardBuilder()
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if page > 1:
        builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"phrases_page_{page - 1}")
    if page < total_pages:
        builder.button(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"phrases_page_{page + 1}")
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="trolling_phrases")
    builder.adjust(2)  # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    await callback.message.edit_text(
        message_text, parse_mode="HTML", reply_markup=builder.as_markup()
    )
